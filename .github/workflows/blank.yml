# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!

      # Runs a set of commands using the runners shell
      - name: Run a multi-line script
        run: |
          echo Add other actions to build,
          echo test, and deploy your project.
      - name: Azure App Configuration Sync
  uses: Azure/AppConfiguration-Sync@v1.1.1
  with:
    # Path to the configuration file in the repo, relative to the repo root. Also supports glob patterns and multiple files
    configurationFile: 
    # Format of the configuration file. Valid values are: json, yaml, properties
    format: 
    # Connection string for the App Configuration instance
    connectionString: 
    # Separator used when flattening the configuration file to key-value pairs
    separator: 
    # Specifies whether to use a strict sync which will make the App Configuration instance exactly match the configuration file (deleting key-values not in the configuration file). Defaults to false
    strict: # optional
    # Prefix that will be added to the front of the keys
    prefix: # optional
    # Label to use when setting the key-value pairs. If not specified, a null label will be used
    label: # optional
    # Max depth (positive number) for flattening the configuration file
    depth: # optional
    # Stringified form of a JSON object with the following shape: { [propertyName: string]: string; }
    tags: # optional
    # Content type associated with the values
    contentType: # optional
